/*  =========================================================================
    lmdbdbi - Manager for a named LMDB database interface, within an lmdbenv object

    Copyright (c) 2017 Inkblot Software Limited.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

#ifndef LMDBDBI_H_INCLUDED
#define LMDBDBI_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/lmdbdbi.xml" to make changes.
//  @interface
//  This API is a draft, and may change without notice.
#ifdef CLASSLMDB_BUILD_DRAFT_API
//  *** Draft method, for development use, may change without warning ***
//  Create a named database interface object, using the provided lmdbenv.
//  Note that a database is not a file, but a key/val collection inside one.
//  Creates the database if it does not already exist.
//  If you want the file to contain exactly one database, pass NULL for name.
//  Returns NULL on failure.
CLASSLMDB_EXPORT lmdbdbi_t *
    lmdbdbi_new (lmdbenv_t *env, const char *name);

//  *** Draft method, for development use, may change without warning ***
//  As simple ctr, but the DB must only hold keys of unsigned int or size_t,
//  all keys having the same size, and with sequential traversal (e.g. with
//  a cursor) following their natural numeric order, not doing a per-byte
//  comparison like LMDB usually does.
CLASSLMDB_EXPORT lmdbdbi_t *
    lmdbdbi_new_intkeys (lmdbenv_t *env, const char *name);

//  *** Draft method, for development use, may change without warning ***
//  Aborts the transaction if not already committed.
CLASSLMDB_EXPORT void
    lmdbdbi_destroy (lmdbdbi_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Fetch a the value from the DB with the given key.
//  Returns nullish lmdbspan (.data == NULL) if the key doesn't exist, or if an
//  error occurs (this will be becuase you supplied a duff dbi or txn).
CLASSLMDB_EXPORT lmdbspan
    lmdbdbi_get (lmdbdbi_t *self, lmdbtxn_t *txn, const void *key, size_t key_size);

//  *** Draft method, for development use, may change without warning ***
//  As get method, but takes a string as key.
//  NB counts the terminating NULL as part of the string.
CLASSLMDB_EXPORT lmdbspan
    lmdbdbi_get_str (lmdbdbi_t *self, lmdbtxn_t *txn, const char *key);

//  *** Draft method, for development use, may change without warning ***
//  As get method, but takes an uint32_t as key.
CLASSLMDB_EXPORT lmdbspan
    lmdbdbi_get_ui32 (lmdbdbi_t *self, lmdbtxn_t *txn, uint32_t key);

//  *** Draft method, for development use, may change without warning ***
//  Put a key/val pair to the DB.
//  Returns 0 on sucess, -1 on failure.
CLASSLMDB_EXPORT int
    lmdbdbi_put (lmdbdbi_t *self, lmdbtxn_t *txn, const void *key, size_t key_size, const void *value, size_t value_size);

//  *** Draft method, for development use, may change without warning ***
//  As put method, but takes a string as the key.
//  NB treats the terminating NULL as part of the string.
CLASSLMDB_EXPORT int
    lmdbdbi_put_str (lmdbdbi_t *self, lmdbtxn_t *txn, const char *key, const void *value, size_t value_size);

//  *** Draft method, for development use, may change without warning ***
//  As put method, but takes both key and val are strings.
//  NB for both strings counts the terminating NULL as part of the string.
CLASSLMDB_EXPORT int
    lmdbdbi_put_strstr (lmdbdbi_t *self, lmdbtxn_t *txn, const char *key, const char *value);

//  *** Draft method, for development use, may change without warning ***
//  As put method, but takes a uint32_t as key.
CLASSLMDB_EXPORT int
    lmdbdbi_put_ui32 (lmdbdbi_t *self, lmdbtxn_t *txn, uint32_t key, const void *val, size_t val_size);

//  *** Draft method, for development use, may change without warning ***
//  Returns true iff the instance was created as an intkeys dbi.
CLASSLMDB_EXPORT bool
    lmdbdbi_has_intkey (lmdbdbi_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return a copy of the the underlying MDB_dbi.
//  BEWARE: this is an escape hatch for people that *really* need it; if you
//  need more functionality then prefer to extend this library to contain it.
CLASSLMDB_EXPORT MDB_dbi
    lmdbdbi_handle (lmdbdbi_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class.
CLASSLMDB_EXPORT void
    lmdbdbi_test (bool verbose);

#endif // CLASSLMDB_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
