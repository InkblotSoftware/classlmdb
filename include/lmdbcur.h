/*  =========================================================================
    lmdbcur - Manager for an LMDB database-traversal cursor.

    Copyright (c) 2017 Inkblot Software Limited.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

#ifndef LMDBCUR_H_INCLUDED
#define LMDBCUR_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/lmdbcur.xml" to make changes.
//  @interface
//  This API is a draft, and may change without notice.
#ifdef CLASSLMDB_BUILD_DRAFT_API
//  *** Draft method, for development use, may change without warning ***
//  Creates a cursor that traverses all k/v pairs in the DB in ascending order.
//  Returns NULL on any error.
CLASSLMDB_EXPORT lmdbcur_t *
    lmdbcur_new_overall (lmdbdbi_t *dbi, lmdbtxn_t *txn);

//  *** Draft method, for development use, may change without warning ***
//  Creates a cursor that traverses all k/y pairs in the DB in ascending order,
//  starting at the provided key. Key must exist.
//  Returns NULL on any error except key not existing.
//
//  Construction still succeeds if the key was not found, so check immediately
//  after with _matched() to see if the cursor is usable. Other methods will
//  fail if not.
CLASSLMDB_EXPORT lmdbcur_t *
    lmdbcur_new_fromkey (lmdbdbi_t *dbi, lmdbtxn_t *txn, const void *key, size_t key_size);

//  *** Draft method, for development use, may change without warning ***
//  As _fromkey ctr, but if the provided key does not exist starts iteration
//  at the next key above it ('greater than or equal to key').
//  If no keys exist above, iterates over the empty set, like _overall() will.
//  Returns NULL on any error.
CLASSLMDB_EXPORT lmdbcur_t *
    lmdbcur_new_gekey (lmdbdbi_t *dbi, lmdbtxn_t *txn, const void *key, size_t key_size);

//  *** Draft method, for development use, may change without warning ***
//  Destroy the lmdbcur.
CLASSLMDB_EXPORT void
    lmdbcur_destroy (lmdbcur_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Move the cursor to the next k/v pair in the db, in key sorted
//  ascending order.
//  Returns 0 on success, or -1 if no such key exists.
CLASSLMDB_EXPORT int
    lmdbcur_next (lmdbcur_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Did the cursor manage to find a key/val pair with a key matching
//  the one you asked for the the ctr?
//  Only valid if new_fromkey ctr used.
CLASSLMDB_EXPORT bool
    lmdbcur_matched (lmdbcur_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Returns the key the cursor is curently pointing to.
//  You need this when you call _next() and don't know what's there.
//  Returns nullish lmdbspan on error (!lmdspan_valid (s)), which isn't a real
//  value that can be returned from the DB.
CLASSLMDB_EXPORT lmdbspan
    lmdbcur_key (lmdbcur_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Like key(), but returns the value the cursor is curently pointing to.
CLASSLMDB_EXPORT lmdbspan
    lmdbcur_val (lmdbcur_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return a pointer to the underlying MDB_cur we're managing.
//  BEWARE: this is an escape hatch for people that *really* need it; if you
//  need more functionality then prefer to extend this library to contain it.
CLASSLMDB_EXPORT MDB_cursor *
    lmdbcur_handle (lmdbcur_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class.
CLASSLMDB_EXPORT void
    lmdbcur_test (bool verbose);

#endif // CLASSLMDB_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
