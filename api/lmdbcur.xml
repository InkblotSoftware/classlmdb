<class name = "lmdbcur">
  <!--
  Copyright (c) 2017 Inkblot Software Limited.

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.
  -->

  Manager for an LMDB database-traversal cursor.


  <!-- Ctr/dtr -->

  <constructor name = "new overall">
    Creates a cursor that traverses all k/v pairs in the DB in ascending order.
    Returns NULL on any error.

    <argument name = "dbi" type = "lmdbdbi" />
    <argument name = "txn" type = "lmdbtxn" />
  </constructor>

  <constructor name = "new fromkey">
    Creates a cursor that traverses all k/y pairs in the DB in ascending order,
    starting at the provided key. Key must exist.
    Returns NULL on any error except key not existing.

    Construction still succeeds if the key was not found, so check immediately
    after with _matched() to see if the cursor is usable. Other methods will
    fail if not.
    
    <argument name = "dbi" type = "lmdbdbi" />
    <argument name = "txn" type = "lmdbtxn" />

    <argument name = "key" type = "anything" mutable = "0" />
    <argument name = "key size" type = "size" />
  </constructor>

  <constructor name = "new gekey">
    As _fromkey ctr, but if the provided key does not exist starts iteration
    at the next key above it ('greater than or equal to key').
    If no keys exist above, iterates over the empty set, like _overall() will.
    Returns NULL on any error.

    <argument name = "dbi" type = "lmdbdbi" />
    <argument name = "txn" type = "lmdbtxn" />

    <argument name = "key" type = "anything" mutable = "0" />
    <argument name = "key size" type = "size" />
  </constructor>

  <destructor>
  </destructor>


  <!-- Moving the cursor -->

  <method name = "next">
    Move the cursor to the next k/v pair in the db, in key sorted
    ascending order.
    Returns 0 on success, or -1 if no such key exists.
    <return type = "integer" />
  </method>


  <!-- If you searched for a specific key, check it was found -->

  <method name = "matched">
    Did the cursor manage to find a key/val pair with a key matching
    the one you asked for the the ctr?
    Only valid if new_fromkey ctr used.
    <return type = "boolean" />
  </method>

  
  <!-- Accessing the k/v the cursor is pointing to -->

  <method name = "key">
    Returns the key the cursor is curently pointing to.
    You need this when you call _next() and don't know what's there.
    Returns nullish lmdbspan on error (!lmdspan_valid (s)), which isn't a real
    value that can be returned from the DB.
    <return type = "lmdbspan" c_type = "lmdbspan" />
  </method>

  <method name = "val">
    Like key(), but returns the value the cursor is curently pointing to.
    <return type = "lmdbspan" c_type = "lmdbspan" />
  </method>
  

  <!-- Accessors -->

  <method name = "handle">
    Return a pointer to the underlying MDB_cur we're managing.
    BEWARE: this is an escape hatch for people that *really* need it; if you
    need more functionality then prefer to extend this library to contain it.
    <return type = "MDB_cursor ptr" c_type = "MDB_cursor *" />
  </method>

</class>
